version: '3'
services:
  gateway:
    build: ./api-gateway
    restart: always
    hostname: api-gateway
    env_file:
      - ./api-gateway/.env
    environment:
      GAME_SERVICE_HOST: game-service
      ADMIN_SERVICE_HOST: admin-service
      FRONTEND_HOST: frontend-service
      PORT: 3003
      GAME_SERVICE_PORT: 3001
      ADMIN_SERVICE_PORT: 3002
      FRONTEND_PORT: 80
    ports:
      - "8000:3003"
    networks:
      - backend
      - frontend
    depends_on:
      - admin-service
      - game-service

  frontend-service:
    build: ./web
    restart: always
    hostname: frontend-service
    networks:
      - frontend

  admin-service:
    build: ./admin-service
    restart: always
    hostname: admin-service
    env_file:
      - ./admin-service/.env
    environment:
      JWT_SECRET: MyRandomSecret
      OAUTH_REDIRECT_URL: http://localhost:8000/api/login/openid/return
      AD_TENANT_ID: e2dd5dd5-cd84-46b3-a607-518b52272bb7
      AD_CLIENT_ID: c64a4147-29bc-403a-918b-178a85e2d7dc
      AD_CLIENT_SECRET: d22a4643-e119-40e6-85f6-eda46711dfe6
      DB_HOST: postgres
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-admin-service}
    networks:
      - backend
    links:
      - postgres
    depends_on:
      - postgres
  game-service:
    build: ./game-service
    restart: always
    hostname: game-service
    env_file:
      - ./game-service/.env
    environment:
      DB_HOST: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-game-service}
    networks:
      - backend
    links:
      - postgres
      - redis
    depends_on:
      - postgres
      - redis
  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - backend

  redis:
    container_name: redis
    image: redis:alpine
    restart: unless-stopped
    command: redis-server # --requirepass ....
    ports:
      - ${REDIS_PORT:-6379}:6379
    volumes:
      - redis:/data
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - backend

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge

volumes:
  postgres: {}
  redis: {}
